% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/trial_image_keyboard_response.R
\name{trial_image_keyboard_response}
\alias{trial_image_keyboard_response}
\title{Specify an image trial with keyboard response}
\usage{
trial_image_keyboard_response(stimulus, stimulus_height = NULL,
  stimulus_width = NULL, maintain_aspect_ratio = TRUE,
  choices = respond_any_key(), prompt = NULL,
  stimulus_duration = NULL, trial_duration = NULL,
  response_ends_trial = TRUE, post_trial_gap = 0, on_finish = NULL,
  on_load = NULL, data = NULL)
}
\arguments{
\item{stimulus}{The path of the image file to be displayed.}

\item{stimulus_height}{Set the height of the image in pixels. If NULL, then the image will display at its natural height.}

\item{stimulus_width}{Set the width of the image in pixels. If NULL, then the image will display at its natural width.}

\item{maintain_aspect_ratio}{If setting only the width or only the height and this parameter is TRUE, then the other dimension will be scaled to maintain the image's aspect ratio.}

\item{choices}{A character vector of keycodes (either numeric values or the characters themselves). Alternatively, respond_any_key() and respond_no_key() can be used}

\item{prompt}{A string (may contain HTML) that will be displayed below the stimulus, intended as a reminder about the actions to take (e.g., which key to press).}

\item{stimulus_duration}{How long to show the stimulus, in milliseconds. If NULL, then the stimulus will be shown until the subject makes a response}

\item{trial_duration}{How long to wait for a response before ending trial in milliseconds. If NULL, the trial will wait indefinitely. If no response is made before the deadline is reached, the response will be recorded as NULL.}

\item{response_ends_trial}{If TRUE, then the trial will end when a response is made (or the trial_duration expires). If FALSE, the trial continues until the deadline expires.}

\item{post_trial_gap}{The gap in milliseconds between the current trial and the next trial. If NULL, there will be no gap.}

\item{on_finish}{A javascript callback function to execute when the trial finishes}

\item{on_load}{A javascript callback function to execute when the trial begins, before any loading has occurred}

\item{data}{An object containing additional data to store for the trial}
}
\value{
Functions with a \code{trial_} prefix always return a "trial" object.
A trial object is simply a list containing the input arguments, with
\code{NULL} elements removed. Logical values in the input (\code{TRUE} and
\code{FALSE}) are transformed to character vectors \code{"true"} and \code{"false"}
and are specified to be objects of class "json", ensuring that they will be
written to file as the javascript logicals, \code{true} and \code{false}.
}
\description{
The \code{trial_image_keyboard_response} function is used to display
an image stimulus and collect a response using a key press.
}
\details{
The \code{trial_image_keyboard_response} function belongs to the "stimulus-response"
family of trials, all of which display a stimulus of a particular type (image,
audio, video or HTML) and collect responses using a particular mechanism
(button, keyboard or slider).
This one displays an image and records responses generated with a key press.

\subsection{Stimulus display}{
TBA
}

\subsection{Response mechanism}{
For this kind of trial, participants can make a response by pressing a key,
and the \code{choices} argument is used to control which keys will register
a valid response. The default value \code{choices = \link{respond_any_key}()}
is to allow the participant to press any key to register their response.
Alternatively it is possible to set \code{choices = \link{respond_no_key}()},
which prevents all keys from registering a response: this can be useful if
the trial is designed to run for a fixed duration, regardless of what the
participant presses.

In many situations it is preferable to require the participant to respond
using specific keys (e.g., for a binary choice tasks, it may be desirable to
require participants to press F for one response or J for the other). This
can be achieved in two ways. One possibility is to use a character vector
as input (e.g., \code{choices = c("f","j")}). The other is to use the
numeric code that specifies the desired key in javascript, which in this
case would be \code{choices = c(70, 74)}. To make it a little easier to
work with numeric codes, the jaysire package includes the
\code{\link{keycode}()} function to make it easier to convert from one format
to the other.
}

\subsection{Other behaviour}{
Depending on parameter settings, the trial can end when the subject responds
(\code{response_ends_trial = TRUE}), or after a fixed amount of time
(specified using the \code{trial_duration} argument) has elapsed. The length
of time that the stimulus remains visible can also be customized using the
(\code{stimulus_duration}) argument.

Like all functions in the \code{trial_} family it contains four additional
arguments:

\itemize{
\item The \code{post_trial_gap} argument is a numeric value specifying the
length of the pause between the current trial ending and the next one
beginning. This parameter overrides any default values defined using the
\code{\link{build_experiment}} function, and a blank screen is displayed
during this gap period.

\item The \code{on_load} and \code{on_finish} arguments can be used to
specify javascript functions that will execute before the trial begins or
after it ends. The javascript code can be written manually and inserted *as*
javascript by using the \code{\link{insert_javascript}} function. However,
the \code{fn_} family of functions supplies a variety of functions that may
be useful in many cases.

\item The \code{data} argument can be used to insert custom data values into
the jsPsych data storage for this trial.
}
}

\subsection{Data}{

When this function is called from R it returns the trial object that will
later be inserted into the experiment when \code{\link{build_experiment}}
is called. However, when the trial runs as part of the experiment it returns
values that are recorded in the jsPsych data store and eventually form part
of the data set for the experiment.

The data recorded by this trial is as follows:

\itemize{
\item The \code{rt} value is the response time in milliseconds taken for the
user to make a response. The time is measured from when the stimulus first
appears on the screen until the response.
\item The \code{key_press} variable is the numeric javascript key code
corresponding to the response.
\item The \code{stimulus} variable records the path to the image that was
displayed on this trial.
}

In addition, it records default variables that are recorded by all trials:

\itemize{
\item \code{trial_type} is a string that records the name of the plugin used to run the trial.
\item \code{trial_index} is a number that records the index of the current trial across the whole experiment.
\item \code{time_elapsed} counts the number of milliseconds since the start of the experiment when the trial ended.
\item \code{internal_node_id} is a string identifier for the current "node" in the timeline.
}
}
}
\seealso{
Within the "stimulus-response" family of trials, there are four types of
stimuli (image, audio, video and HTML) and three types of response options
(button, keyboard, slider). The corresponding functions are
\code{\link{trial_image_button_response}},
\code{\link{trial_image_keyboard_response}},
\code{\link{trial_image_slider_response}},
\code{\link{trial_audio_button_response}},
\code{\link{trial_audio_keyboard_response}},
\code{\link{trial_audio_slider_response}},
\code{\link{trial_video_button_response}},
\code{\link{trial_video_keyboard_response}},
\code{\link{trial_video_slider_response}},
\code{\link{trial_html_button_response}},
\code{\link{trial_html_keyboard_response}} and
\code{\link{trial_html_slider_response}}.
}
